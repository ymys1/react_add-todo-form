{"version":3,"sources":["api/users.ts","api/todos.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["id","name","username","email","title","completed","userId","UserInfo","user","className","href","TodoInfo","todo","classnames","TodoList","App","users","usersFromServer","todos","todosFromServer","useState","selectedUser","setSelectedUser","currentTitle","setCurrentTitle","map","find","todosWithUsers","setTodosWithUsers","isValid","setIsValid","validatedTitleAndUser","handleAddButton","event","preventDefault","sort","a","b","Number","action","method","onSubmit","htmlFor","type","placeholder","value","onChange","target","trim","selected","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5e931138.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import React from 'react';\nimport { User } from '../../types/Types';\n\ntype Props = {\n  user: User | null;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  if (!user) {\n    return null;\n  }\n\n  const {\n    email,\n    name,\n  } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import React from 'react';\nimport classnames from 'classnames';\nimport { UserInfo } from '../UserInfo';\nimport { TodosWithUser } from '../../types/Types';\n\ntype Props = {\n  todo: TodosWithUser\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    id,\n    title,\n    completed,\n    user,\n  } = todo;\n\n  return (\n    <article\n      key={id}\n      data-id={id}\n      className={classnames('TodoInfo', { 'TodoInfo--completed': completed })}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      <UserInfo user={user} />\n    </article>\n  );\n};\n","import React from 'react';\nimport { TodoInfo } from '../TodoInfo';\nimport { TodosWithUser } from '../../types/Types';\n\ntype Props = {\n  todo: TodosWithUser\n};\n\nexport const TodoList:React.FC <Props> = ({ todo }) => (\n  <section className=\"TodoList\">\n    <TodoInfo todo={todo} />\n  </section>\n);\n","import { useState } from 'react';\nimport './App.scss';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { TodoList } from './components/TodoList';\nimport { Todo, User, TodosWithUser } from './types/Types';\n\nexport const App = () => {\n  const users: User[] = usersFromServer;\n  const todos: Todo[] = todosFromServer;\n\n  const preparedTodosWithUsers = () => (\n    todos.map(todo => ({\n      ...todo,\n      user: users.find(user => user.id === todo.userId) || null,\n    }))\n  );\n\n  const [selectedUser, setSelectedUser] = useState('');\n  const [currentTitle, setCurrentTitle] = useState('');\n  const [\n    todosWithUsers,\n    setTodosWithUsers,\n  ] = useState<TodosWithUser[]>(preparedTodosWithUsers());\n  const [isValid, setIsValid] = useState(true);\n\n  const resetValidated = () => {\n    setIsValid(true);\n  };\n\n  const resetSelectedUser = () => {\n    setSelectedUser('');\n  };\n\n  const resetCrrentTitle = () => {\n    setCurrentTitle('');\n  };\n\n  const validatedTitleAndUser = currentTitle && selectedUser;\n\n  const handleAddButton = (event:React.FormEvent<HTMLInputElement>) => {\n    if (validatedTitleAndUser) {\n      event.preventDefault();\n      setTodosWithUsers(\n        [...todosWithUsers,\n          {\n            id: (todos.sort((a, b) => b.id - a.id)[0].id + 1),\n            title: currentTitle,\n            userId: Number(selectedUser),\n            completed: false,\n            user: users.find(user => user.id === Number(selectedUser)) || null,\n          },\n        ],\n      );\n      resetValidated();\n      resetSelectedUser();\n      resetCrrentTitle();\n    }\n\n    if (!validatedTitleAndUser) {\n      setIsValid(false);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={() => handleAddButton}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"titleInput\">\n\n            <input\n              type=\"text\"\n              data-cy=\"titleInput\"\n              placeholder=\"Enter a title\"\n              value={currentTitle}\n              onChange={event => setCurrentTitle(event.target.value.trim())}\n            />\n          </label>\n\n          {(!isValid && !currentTitle) && (\n            <span className=\"error\">Please enter a title</span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"userSelect\">\n            <select\n              data-cy=\"userSelect\"\n              value={selectedUser}\n              onChange={event => setSelectedUser(event.target.value)}\n            >\n              <option\n                value=\"\"\n                selected\n                disabled\n              >\n                Choose a user\n              </option>\n\n              {users.map(user => (\n                <option\n                  key={user.id}\n                  value={user.id}\n                >\n                  {user.name}\n                </option>\n              ))}\n            </select>\n          </label>\n          {(!isValid && !selectedUser) && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n        >\n          Add\n        </button>\n      </form>\n\n      {todosWithUsers.map(todo => (\n        <TodoList\n          key={todo.id}\n          todo={todo}\n        />\n      ))}\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}